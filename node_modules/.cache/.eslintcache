[{"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/index.js":"1","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/App.js":"2","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/context/BlockChainContext.js":"3","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/context/GlobalState.js":"4","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/LandingPage.js":"5","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/LoginPage.js":"6","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/Timeline.js":"7","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/EditDetails.js":"8","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/BloodbankHome.js":"9","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/BloodIntakePage.js":"10","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/HospitalHome.js":"11","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/temp.js":"12","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/context/GlobalContext.js":"13","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/ExamplesNavbar.js":"14","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/SendEmail.js":"15","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/LandingPageHeader.js":"16","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/AadharApi.js":"17","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/GetDistance.js":"18","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/ProfilePageHeader.js":"19","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/DefaultFooter.js":"20"},{"size":316,"mtime":1731068377592,"results":"21","hashOfConfig":"22"},{"size":4583,"mtime":1731068377519,"results":"23","hashOfConfig":"22"},{"size":81,"mtime":1731068377592,"results":"24","hashOfConfig":"22"},{"size":375,"mtime":1731068377592,"results":"25","hashOfConfig":"22"},{"size":4869,"mtime":1731071597564,"results":"26","hashOfConfig":"22"},{"size":9724,"mtime":1731071608019,"results":"27","hashOfConfig":"22"},{"size":9134,"mtime":1731071444489,"results":"28","hashOfConfig":"22"},{"size":13613,"mtime":1731071445190,"results":"29","hashOfConfig":"22"},{"size":13054,"mtime":1731068377592,"results":"30","hashOfConfig":"22"},{"size":12466,"mtime":1731071446073,"results":"31","hashOfConfig":"22"},{"size":37524,"mtime":1731068377592,"results":"32","hashOfConfig":"22"},{"size":10653,"mtime":1731068377593,"results":"33","hashOfConfig":"22"},{"size":110,"mtime":1731068377592,"results":"34","hashOfConfig":"22"},{"size":6395,"mtime":1731068377592,"results":"35","hashOfConfig":"22"},{"size":428,"mtime":1731068377592,"results":"36","hashOfConfig":"22"},{"size":1958,"mtime":1731071662630,"results":"37","hashOfConfig":"22"},{"size":1538,"mtime":1731068377591,"results":"38","hashOfConfig":"22"},{"size":671,"mtime":1731068377592,"results":"39","hashOfConfig":"22"},{"size":2537,"mtime":1731068377592,"results":"40","hashOfConfig":"22"},{"size":786,"mtime":1731068377591,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},"7o5dna",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"45"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"45"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"45"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"45"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"45"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/index.js",["91","92","93"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n",["94","95"],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/App.js",["96","97","98"],"import React, { Component, useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport freelance from \"../src/build/contracts/AssetTracker.json\"\n\nimport BlockchainContext from \"./context/BlockChainContext\";\nimport ReactDOM from \"react-dom\";\n\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\n\n// styles for this kit\nimport \"assets/css/bootstrap.min.css\";\nimport \"assets/scss/now-ui-kit.scss?v=1.5.0\";\nimport \"assets/demo/demo.css?v=1.5.0\";\nimport \"assets/demo/nucleo-icons-page-styles.css?v=1.5.0\";\n// pages for this kit\n\nimport LoginPage from \"views/LoginPage.js\";\nimport Timeline from \"views/Timeline.js\";\nimport LandingPage from \"views/LandingPage.js\";\nimport BloodbankHome from \"views/BloodbankHome.js\";\nimport BloodIntake from \"views/BloodIntakePage.js\";\nimport EditDetails from \"views/EditDetails.js\";\nimport HospitalHome from \"views/HospitalHome.js\";\nimport Temp from \"views/temp\";\nimport GlobalState from \"./context/GlobalState\"\n\n\nconst getWeb3 = async () => {\n    let tempWeb3 = undefined;\n    if (window.ethereum) {\n        tempWeb3 = new Web3(window.ethereum);\n        try {\n            // Request account access if needed\n            await window.ethereum.enable();\n            // console.log(tempWeb3);\n            //console.log(web3.eth.getAccounts());\n            // Acccounts now exposed\n        } catch (error) {\n            // User denied account access...\n        }\n    }\n    // Legacy dapp browsers...\n    else if (tempWeb3) {\n        tempWeb3 = new Web3(tempWeb3.currentProvider);\n        // console.log(tempWeb3);\n        // Acccounts always exposed\n    }\n    // Non-dapp browsers...\n    else {\n        console.log(\n            \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n        );\n    }\n\n    return tempWeb3;\n};\n\nconst App = () => {\n    const [web3, setWeb3] = useState(undefined);\n    const [accounts, setAccounts] = useState([]);\n    const [contract, setContract] = useState();\n\n    useEffect(() => {\n        const init = async () => {\n            // load web3\n            const tempWeb3 = await getWeb3();\n            // loadBlockchainData\n            const tempAccounts = await tempWeb3.eth.getAccounts();\n            const networkId = await tempWeb3.eth.net.getId();\n            let freelancecon;\n\n            const listener = (accs) => {\n                setAccounts(accs);\n            };\n\n            window.ethereum.on(\"accountsChanged\", listener);\n\n\n            // console.log(tempWeb3);\n            // console.log(tempAccounts);\n            // //\n            // console.log(networkId);\n            // console.log(freelance);\n\n            const networkdata = freelance.networks[networkId];\n            // console.log(\"networkdata\",networkdata);\n            if (networkdata) {\n                const abi = freelance.abi;\n                // console.log(\"freelance.abi\", freelance.abi);\n                freelancecon = new tempWeb3.eth.Contract(\n                    abi,\n                    networkdata.address\n                );\n\n                // console.log(\"freelancecon\",freelancecon);\n            }\n\n            // saving this to states\n            setWeb3(tempWeb3);\n            setAccounts(tempAccounts);\n            setContract(freelancecon);\n            // console.log(\"contract init\", contract);\n            // console.log(\"accounts\", accounts);\n            // console.log(\"web3\", web3);\n        };\n\n        init();\n    }, []);\n\n\n    return (\n        <GlobalState >\n            <BlockchainContext.Provider value={{ web3, accounts, contract }}>\n            <Switch>\n                <Switch>\n                    <Route path=\"/login\" render={(props) => <LoginPage {...props} />} />\n                    <Route path=\"/timeline\" render={(props) => <Timeline {...props} />} />\n                    <Route path=\"/bloodintake\" render={(props) => <BloodIntake {...props} />} />\n                    <Route path=\"/editdetails\" render={(props) => <EditDetails {...props} />} />\n                    <Route path=\"/hospitalhome\" render={(props) => <HospitalHome {...props} />} />\n                    <Route path=\"/temp\" render={(props) => <Temp {...props} />} />\n                    <Route\n                        path=\"/bloodbankhome\"\n                        render={(props) => <BloodbankHome {...props} />}\n                    />\n                    <Route path=\"/\" render={(props) => <LandingPage {...props} />} />\n                    <Redirect to=\"/\" />\n                </Switch>\n            </Switch>\n            </BlockchainContext.Provider>\n        </GlobalState>\n    );\n}\n\nexport default App;\n","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/context/BlockChainContext.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/context/GlobalState.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/LandingPage.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/LoginPage.js",["99","100","101","102"],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/Timeline.js",["103","104","105","106","107"],"import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport BlockchainContext from \"../context/BlockChainContext\";\nimport globalContext from \"../context/GlobalContext\";\n\nimport MyTimeLine from \"react-timeline-vertical-component\";\nimport GetInfoFromAadhar from \"components/AadharApi.js\";\n\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  Form,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Container,\n  Col,\n} from \"reactstrap\";\n\n// core components\nimport ExamplesNavbar from \"components/ExamplesNavbar.js\";\n\nfunction Timeline(props) {\n  const { web3, accounts, contract } = useContext(BlockchainContext);\n  const { SET_USER } = useContext(globalContext);\n\n  const [firstFocus, setFirstFocus] = React.useState(false);\n  const [lastFocus, setLastFocus] = React.useState(false);\n\n  const history = useHistory();\n  const [adhar_in, setAdhar_in] = React.useState(\"4597 5546 4659\");\n  const [bldid_in, setBldid_in] = React.useState(\"00a41088\");\n  const [show, setShow] = React.useState(false);\n  const [timelineData, setTimelineData] = React.useState([]);\n\n  React.useEffect(() => {\n    document.body.classList.add(\"login-page\");\n    document.body.classList.add(\"sidebar-collapse\");\n    document.documentElement.classList.remove(\"nav-open\");\n    window.scrollTo(0, 0);\n    document.body.scrollTop = 0;\n    return function cleanup() {\n      document.body.classList.remove(\"login-page\");\n      document.body.classList.remove(\"sidebar-collapse\");\n    };\n  }, []);\n\n  const toggleShow = () => {\n    if (show) {\n      setShow(false);\n    } else {\n      setShow(true);\n    }\n  };\n\n  const formSubmit = async (e) => {\n    e.preventDefault();\n    if (adhar_in.trim() !== \"\" && bldid_in.trim() !== \"\") {\n      let temp_adhar = adhar_in.trim().toLowerCase().replaceAll(\" \", \"\");\n      let temp_bldid = bldid_in.trim().toLowerCase();\n\n      try {\n        var b_count = await contract.methods.getBloodCount().call();\n        console.log(\"Finding blood\");\n        let temp_tl = [];\n        for (let i = 1; i <= b_count; ++i) {\n          const tag = await contract.methods.getBlood(i).call();\n\n          if (\n            tag[\"0\"].trim().toLowerCase() === temp_bldid &&\n            tag[\"2\"].trim().toLowerCase().replaceAll(\" \", \"\") === temp_adhar\n          ) {\n            console.log(\"tag\", tag);\n            const tag1 = await contract.methods.getBlood2(i).call();\n            for (let j = 1; j <= tag1[\"1\"]; j++) {\n              const tag2 = await contract.methods.getStatus(i, j).call();\n              let a = new Date(1000 * tag2[\"0\"]);\n              let b = GetInfoFromAadhar(adhar_in.trim())[\"Name\"];\n              let c =\n                tag2[\"3\"] === \"0\"\n                  ? \"Not Verified\"\n                  : tag2[\"3\"] === \"1\"\n                  ? \"Tested and Safe\"\n                  : \"Tested and Unsafe\";\n              if (j % 2) {\n                var d =\n                  \"𝗡𝗮𝗺𝗲 : \" +\n                  b +\n                  \". \" +\n                  \"⠀\".repeat(2) +\n                  \"\\n𝗕𝗮𝘁𝗰𝗵 𝗡𝗼 : \" +\n                  tag[\"1\"] +\n                  \". \" +\n                  \"⠀\".repeat(10) +\n                  \" 𝗖𝘂𝗿𝗿𝗲𝗻𝘁 𝗖𝗼𝗿𝗱 : \" +\n                  tag2[\"1\"] +\n                  \". \" +\n                  \"𝗦𝘁𝗮𝘁𝘂𝘀 : \" +\n                  c;\n              } else {\n                var d =\n                  \"𝗡𝗮𝗺𝗲 : \" +\n                  b +\n                  \". \" +\n                  \"⠀\".repeat(12) +\n                  \"\\n𝗕𝗮𝘁𝗰𝗵 𝗡𝗼 : \" +\n                  tag[\"1\"] +\n                  \". \" +\n                  \" 𝗖𝘂𝗿𝗿𝗲𝗻𝘁 𝗖𝗼𝗿𝗱 : \" +\n                  tag2[\"1\"] +\n                  \". \" +\n                  \"𝗦𝘁𝗮𝘁𝘂𝘀 : \" +\n                  c;\n              }\n              temp_tl.push({\n                text: d,\n                //  40+\n                // tag2[\"2\"] +\n                // ,\n                date:\n                  a\n                    .toLocaleString(\"en-GB\")\n                    .split(\" \")[0]\n                    .replaceAll(\"/\", \" / \")\n                    .substring(0, 14) +\n                  \" at \" +\n                  a.toLocaleString(\"en-US\", {\n                    hour: \"numeric\",\n                    minute: \"numeric\",\n                    hour12: true,\n                  }),\n                linkTitle: \"Blood at \" + tag2[\"2\"],\n              });\n            }\n            setTimelineData(temp_tl);\n            toggleShow();\n            console.log(\"temp_tl\", temp_tl);\n            break;\n          }\n        }\n        if (temp_tl.length === 0) {\n          alert(`${\"No Data Found\"}`);\n        }\n      } catch (err) {\n        console.log(\"Error in getting blood\", err);\n        alert(`${\"Enter Valid credentials\"}`);\n      }\n    } else {\n      alert(`${\"Enter Valid credentials\"}`);\n    }\n  };\n\n  return (\n    <>\n      <ExamplesNavbar urlname=\"login\" />\n      <div className=\"wrapper\">\n        <div\n          className=\"page-header clear-filter\"\n          filter-color=\"blue\"\n          hidden={show}\n        >\n          <div\n            className=\"page-header-image\"\n            style={{\n              backgroundImage:\n                \"url(\" + require(\"assets/img/bg4.jpg\").default + \")\",\n            }}\n          ></div>\n          <div className=\"content\">\n            <Container>\n              <Col className=\"ml-auto mr-auto\" md=\"4\">\n                <Card className=\"card-login card-plain\">\n                  <Form action=\"\" className=\"form\" method=\"\">\n                    <CardHeader className=\"text-center\">\n                      <div className=\"logo-container\">\n                        <img\n                          alt=\"...\"\n                          src={require(\"assets/img/now-logo.png\").default}\n                        ></img>\n                      </div>\n                    </CardHeader>\n                    <CardBody>\n                      <InputGroup\n                        className={\n                          \"no-border input-lg\" +\n                          (firstFocus ? \" input-group-focus\" : \"\")\n                        }\n                      >\n                        <InputGroupAddon addonType=\"prepend\">\n                          <InputGroupText>\n                            <i className=\"now-ui-icons users_circle-08\"></i>\n                          </InputGroupText>\n                        </InputGroupAddon>\n                        <Input\n                          placeholder=\"Aadhar Number  ...\"\n                          type=\"text\"\n                          value={adhar_in}\n                          onChange={(event) => setAdhar_in(event.target.value)}\n                          onFocus={() => setFirstFocus(true)}\n                          onBlur={() => setFirstFocus(false)}\n                        ></Input>\n                      </InputGroup>\n                      <InputGroup\n                        className={\n                          \"no-border input-lg\" +\n                          (lastFocus ? \" input-group-focus\" : \"\")\n                        }\n                      >\n                        <InputGroupAddon addonType=\"prepend\">\n                          <InputGroupText>\n                            <i className=\"now-ui-icons text_caps-small\"></i>\n                          </InputGroupText>\n                        </InputGroupAddon>\n                        <Input\n                          placeholder=\"Blood Id ...\"\n                          type=\"text\"\n                          value={bldid_in}\n                          onChange={(event) => setBldid_in(event.target.value)}\n                          onFocus={() => setLastFocus(true)}\n                          onBlur={() => setLastFocus(false)}\n                        ></Input>\n                      </InputGroup>\n                    </CardBody>\n                    <CardFooter className=\"text-center\">\n                      <Button\n                        block\n                        className=\"btn-round\"\n                        color=\"info\"\n                        onClick={formSubmit}\n                      >\n                        Track History\n                      </Button>\n                    </CardFooter>\n                  </Form>\n                </Card>\n              </Col>\n            </Container>\n          </div>\n        </div>\n      </div>\n      {timelineData && (\n        <div\n          hidden={!show}\n          // onClick={toggleShow}\n          className=\"page-header-image pt-5 pb-5 justify-content-center\"\n          style={{\n            color: \"black\",\n            backgroundImage:\n              \"url(\" + require(\"assets/img/bg4.jpg\").default + \")\",\n          }}\n        >\n          <MyTimeLine timelineData={timelineData} />\n          <div className=\"row align-items-center justify-content-center\">\n            <Button className=\"btn-round\" color=\"info\" onClick={toggleShow}>\n              Track for another Blood ID\n            </Button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Timeline;\n","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/EditDetails.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/BloodbankHome.js",["108","109","110","111"],"import React, { useState, useContext, useEffect } from \"react\";\nimport BlockchainContext from \"../context/BlockChainContext\";\nimport globalContext from \"../context/GlobalContext\";\n\n// reactstrap components\nimport {\n  Button,\n  Container,\n  Row,\n  Col,\n  UncontrolledTooltip,\n  Badge,\n} from \"reactstrap\";\n\nimport { useHistory } from \"react-router-dom\";\n\n// core components\nimport ExamplesNavbar from \"components/ExamplesNavbar.js\";\nimport ProfilePageHeader from \"components/ProfilePageHeader.js\";\nimport GetInfoFromAadhar from \"components/AadharApi.js\";\n\nfunction BloodbankHome(props) {\n  const [data, updateData] = useState();\n  const [countdict, updateCountdict] = useState();\n  var b_count = 0;\n\n  const { web3, accounts, contract } = useContext(BlockchainContext);\n  const { user } = useContext(globalContext);\n\n  async function fetchData() {\n    try {\n      if (props && props.location.state) {\n        console.log(\"from edit\");\n        console.log(props.location.state);\n        // console.log(props.location.state.entireData);\n        props.location.state.entireData[\n          props.location.state.card_id_to_be_changed\n        ][\"verified\"] = props.location.state.value.toString();\n\n        // console.log(props.location.state.entireData);\n        console.log(props.location.state.countdict);\n\n        updateData(props.location.state.entireData);\n        console.log(\"Data\", data);\n        updateCountdict(props.location.state.countdict);\n        console.log(\"dict\", countdict);\n      } else {\n        console.log(\"not from edit\");\n        try {\n          console.log(\"inside try catch\");\n          console.log(user.name.toLowerCase().trim());\n          const bloodData = [];\n          b_count = await contract.methods.getBloodCount().call();\n          var bloodcount = {\n            \"A +ve\": 0,\n            \"A -ve\": 0,\n            \"B +ve\": 0,\n            \"B -ve\": 0,\n            \"O +ve\": 0,\n            \"O -ve\": 0,\n            \"AB +ve\": 0,\n            \"AB -ve\": 0,\n          };\n          for (let i = 1; i <= b_count; i++) {\n            const tag1 = await contract.methods.getBlood2(i).call();\n            const tag2 = await contract.methods.getStatus(i, tag1[\"1\"]).call();\n\n            if (\n              user.name.toLowerCase().trim() === tag2[\"2\"].toLowerCase().trim()\n            ) {\n              const tag = await contract.methods.getBlood(i).call();\n\n              //check if the blood belongs to the current blood bank and blood is not expired or not\n              bloodcount[tag[\"4\"]] = bloodcount[tag[\"4\"]] + 1; //adding count of each blood to dict\n\n              var temp = {\n                id: i,\n                bloodId: tag[\"0\"],\n                batchNo: tag[\"1\"],\n                // email: \"\",\n                // name: \"\",\n                adharNo: tag[\"2\"],\n                bloodGroup: tag[\"4\"],\n                verified: tag2[\"3\"],\n                owner: tag2[\"2\"],\n                collectionDate: new Date(1000 * tag2[\"0\"])\n                  .toLocaleString(\"en-GB\")\n                  .split(\" \")[0]\n                  .replaceAll(\"/\", \" / \"),\n                expiryDate: tag[\"5\"].replaceAll(\"/\", \" / \"),\n              };\n              bloodData.push(temp);\n            }\n          }\n          bloodData.reverse();\n          updateCountdict(bloodcount);\n          updateData(bloodData);\n          console.log(\"out of try catch\");\n        } catch (err) {\n          console.log(err);\n          console.log(\"Error in register!\");\n        }\n      }\n    } catch (e) {\n      console.log(\"First Catch error\", e);\n    }\n  }\n\n  React.useEffect(() => {\n    console.log(\"in ue\");\n    fetchData();\n    document.body.classList.add(\"profile-page\");\n    document.body.classList.add(\"sidebar-collapse\");\n    document.documentElement.classList.remove(\"nav-open\");\n    window.scrollTo(0, 0);\n    document.body.scrollTop = 0;\n    return function cleanup() {\n      document.body.classList.remove(\"profile-page\");\n      document.body.classList.remove(\"sidebar-collapse\");\n    };\n  }, []);\n\n  const history = useHistory();\n\n  const showDetails = (e, idx) => {\n    e.preventDefault();\n    history.push({\n      pathname: \"/editdetails\",\n      // search: \"?query=abc\",\n      state: {\n        id: data[idx][\"id\"],\n        bloodId: data[idx][\"bloodId\"],\n        batchNo: data[idx][\"batchNo\"],\n        email: GetInfoFromAadhar(data[idx][\"adharNo\"])[\"Email\"],\n        name: GetInfoFromAadhar(data[idx][\"adharNo\"])[\"Name\"],\n        adharNo: data[idx][\"adharNo\"],\n        bloodGroup: data[idx][\"bloodGroup\"],\n        age: GetInfoFromAadhar(data[idx][\"adharNo\"])[\"Age\"] + \" Years\",\n        verified: data[idx][\"verified\"],\n        collectionDate: data[idx][\"collectionDate\"],\n        expiryDate: data[idx][\"expiryDate\"],\n        owner: data[idx][\"owner\"],\n        currentBloodBank: user.name,\n        cardId: idx,\n        entireData: data,\n        countdict: countdict,\n      },\n    });\n  };\n\n  if (data && countdict) {\n    return (\n      <>\n        <ExamplesNavbar urlname=\"bbhome\" />\n        <div className=\"wrapper\">\n          <ProfilePageHeader\n            name={user.name.toUpperCase()}\n            address={user.add}\n            bloodcount={countdict}\n            phone={user.no}\n            email={user.email}\n          />\n          <div className=\"section\">\n            <Container>\n              <div className=\"button-container row justify-content-center\">\n                <Button\n                  className=\"btn-round\"\n                  color=\"info\"\n                  size=\"lg\"\n                  id=\"emailtooltip\"\n                >\n                  {user.email}\n                </Button>\n                <UncontrolledTooltip delay={0} target=\"emailtooltip\">\n                  Email us here\n                </UncontrolledTooltip>\n                <div className=\"mx-2\"></div>\n                <Button\n                  className=\"btn-round\"\n                  color=\"info\"\n                  size=\"lg\"\n                  id=\"phonetooltip\"\n                >\n                  {user.no}\n                </Button>\n                <UncontrolledTooltip delay={0} target=\"phonetooltip\">\n                  Call us here\n                </UncontrolledTooltip>\n                <div className=\"mx-2\"></div>\n                <Button\n                  className=\"btn-round\"\n                  color=\"info\"\n                  size=\"lg\"\n                  id=\"addresstooltip\"\n                >\n                  {user.add}\n                </Button>\n                <UncontrolledTooltip delay={0} target=\"addresstooltip\">\n                  Visit us here\n                </UncontrolledTooltip>\n              </div>\n              <Row class=\"container-fluid\">\n                <Col className=\"ml-auto mr-auto mb-4\">\n                  <h2 className=\"title text-center\">Donation History</h2>\n                </Col>\n                <Col className=\"ml-auto mr-auto\" md=\"10\">\n                  <Row className=\"collections\">\n                    <Row style={{ justifyContent: \"space-between\" }}>\n                      {data.map((val, idx) => {\n                        return (\n                          <div key={idx}>\n                            <div\n                              class=\"card mt-1 border-5 active pb-0 px-2 shadow\"\n                              id=\"ta\"\n                            >\n                              <div class=\"row \">\n                                <div\n                                  class=\"\"\n                                  style={{\n                                    backgroundColor: \"rgba(45,169,255,255)\",\n                                    borderBottomLeftRadius: \"5px\",\n                                    borderTopLeftRadius: \"5px\",\n                                    maxWidth: \"6px\",\n                                    minWidth: \"6px\",\n                                  }}\n                                ></div>\n                                <div class=\"col\">\n                                  <div class=\"pl-3\">\n                                    <h4 class=\"card-title\">\n                                      <b>Name : </b>\n                                      {\n                                        GetInfoFromAadhar(val[\"adharNo\"])[\n                                          \"Name\"\n                                        ]\n                                      }\n                                    </h4>\n                                    <span>\n                                      <b>Date of Donation : </b>\n                                      {val[\"collectionDate\"]}\n                                    </span>\n                                    <br></br>\n                                    <span>\n                                      <b>Blood Id : </b>\n                                      {val[\"bloodId\"]}\n                                    </span>\n                                    <br></br>\n                                    <span>\n                                      <b>Batch No : </b>\n                                      {val[\"batchNo\"]}\n                                    </span>\n                                    <br></br>\n\n                                    <span>\n                                      <b>Blood Group : </b>\n                                      <Badge\n                                        color=\"primary\"\n                                        className=\"py-1\"\n                                        style={{ fontSize: \"0.6rem\" }}\n                                      >\n                                        {val[\"bloodGroup\"]}\n                                      </Badge>\n                                    </span>\n\n                                    {val[\"verified\"] === \"0\" && (\n                                      <span className=\"ml-3\">\n                                        <b>Verified : </b>\n                                        <Badge\n                                          color=\"warning\"\n                                          className=\"py-1\"\n                                          style={{ fontSize: \"0.6rem\" }}\n                                        >\n                                          Not Verified\n                                        </Badge>\n                                      </span>\n                                    )}\n\n                                    {val[\"verified\"] === \"1\" && (\n                                      <span className=\"ml-3\">\n                                        <b>Status : </b>\n                                        <Badge\n                                          color=\"success\"\n                                          className=\"py-1\"\n                                          style={{ fontSize: \"0.6rem\" }}\n                                        >\n                                          Tested {\"&\"} Safe\n                                        </Badge>\n                                      </span>\n                                    )}\n\n                                    {val[\"verified\"] === \"2\" && (\n                                      <span className=\"ml-3\">\n                                        <b>Status : </b>\n                                        <Badge color=\"danger\" className=\"py-1\">\n                                          Tested {\"&\"} Unsafe\n                                        </Badge>\n                                      </span>\n                                    )}\n\n                                    <Button\n                                      color=\"info\"\n                                      className=\"px-3 py-2 my-4\"\n                                      style={{ width: \"93%\" }}\n                                      onClick={(e) => {\n                                        showDetails(e, idx);\n                                      }}\n                                    >\n                                      <b>Edit Details</b>\n                                    </Button>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </Row>\n                  </Row>\n                </Col>\n              </Row>\n            </Container>\n          </div>\n        </div>\n      </>\n    );\n  } else {\n    return (\n      <div className=\"section\" style={{}}>\n        {/* <h5 class=\"card-title\">\n          <img\n            src=\"https://i.stack.imgur.com/CzQqo.png\"\n            alt=\"\"\n            height=\"100%\"\n            width=\"100%\"\n          />\n        </h5> */}\n        <h5 style={{position : \"absolute\",bottom:-window.innerHeight*0.53,left:window.innerWidth*0.28}}>\n          <img\n            src=\"https://miro.medium.com/max/1400/1*ycWlcQ9BXQ1GhyE7qi_hLA.gif\"\n            alt=\"\"\n            height=\"100%\"\n            width=\"100%\"\n          />\n          <h6 className=\"text-info\" style={{fontWeight:\"bolder\" }}>{\"⠀\".repeat(25)}Loading . . . </h6>\n        </h5>\n      </div>\n    );\n  }\n}\n\nexport default BloodbankHome;\n","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/BloodIntakePage.js",["112","113"],"import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport BlockchainContext from \"../context/BlockChainContext\";\nimport globalContext from \"../context/GlobalContext\";\n\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Form,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport ExamplesNavbar from \"components/ExamplesNavbar.js\";\n\nfunction BloodIntake() {\n  const [adharFocus, setAdharFocus] = React.useState(false);\n  const [bloodIdFocus, setBloodIdFocus] = React.useState(false);\n  const [batchNoFocus, setBatchNoFocus] = React.useState(false);\n  // const [collectionDateFocus, setCollectionDateFocus] = React.useState(false);\n\n  const { web3, accounts, contract } = useContext(BlockchainContext);\n  const { user } = useContext(globalContext);\n\n  React.useEffect(() => {\n    async function fetchMyAPI() {\n      try {\n        const tag = await contract.methods.getBlood(2).call();\n        console.log(\"Fetched Blood\", tag);\n\n        const tag1 = await contract.methods.getBlood2(2).call();\n        console.log(\"Fetched Blood more \", tag1);\n\n        const tag2 = await contract.methods.getStatus(2, 1).call();\n        console.log(\"Fetched latest Blood detils \", tag2);\n\n        const Bloodcount = await contract.methods.getBloodCount().call();\n        console.log(\"Blood count\", Bloodcount);\n      } catch (err) {\n        console.log(\"Error in register!\");\n      }\n    }\n\n    fetchMyAPI();\n\n    document.body.classList.add(\"index-page\");\n    document.body.classList.add(\"sidebar-collapse\");\n    document.documentElement.classList.remove(\"nav-open\");\n    window.scrollTo(0, 0);\n    document.body.scrollTop = 0;\n    return function cleanup() {\n      document.body.classList.remove(\"index-page\");\n      document.body.classList.remove(\"sidebar-collapse\");\n    };\n  });\n\n  const history = useHistory();\n\n  const [data, setData] = useState({\n    bloodId: \"\",\n    batchNo: \"\",\n    // email: \"\",\n    // name: \"\",\n    adharNo: \"\",\n    bloodGroup: \"\", // input lena h\n    // age: \"\",\n    verified: false,\n    // collectionDate: new Date().toLocaleString().split(\",\")[0],\n    currentPosition: user.name,\n    location: \"\",\n    timestamp: new Date().toLocaleString() + \"\",\n  });\n\n  const InputEvent = (event) => {\n    const { name, value } = event.target;\n    setData((preVal) => {\n      return {\n        ...preVal,\n        [name]: value,\n      };\n    });\n  };\n\n  const formSubmit = async (e) => {\n    e.preventDefault();\n\n    if (true) {\n      try {\n        await contract.methods\n          .createAsset(\n            data.bloodId,\n            data.batchNo,\n            data.adharNo,\n            user.name,\n            data.bloodGroup,\n            new Date(Date.now() + 42 * 86400000)\n              .toLocaleString(\"en-GB\")\n              .split(\" \")[0],\n              user.location,\n          )\n          .send({ from: accounts[0] });\n      } catch (err) {\n        console.log(\"Error in creation\");\n      }\n      history.push(\"/bloodbankhome\");\n    } else {\n      alert(`${\"Enter Valid credentials\"}`);\n    }\n  };\n\n  const handleChange = (e) => {\n    setData({\n      bloodId: data.bloodId,\n      batchNo: data.batchNo,\n      email: data.email,\n      name: data.name,\n      adharNo: data.adharNo,\n      bloodGroup: e.target.value,\n      age: data.age,\n      verified: false,\n      collectionDate: new Date().toLocaleString().split(\",\")[0],\n      currentBloodBank: \"Vijayee Blood Bank\",\n      currentPosition: \"\",\n      timestamp: new Date().toLocaleString() + \"\",\n    });\n  };\n\n  const populate_data = async (e) => {\n    var bg = [\n      \"A +ve\",\n      \"A -ve\",\n      \"B +ve\",\n      \"B -ve\",\n      \"O +ve\",\n      \"O -ve\",\n      \"AB +ve\",\n      \"AB -ve\",\n    ];\n    var bbs = [\n      \"Vijayee Blood Bank\",\n      \"Prabodhan Blood Bank\",\n      \"Ridhi sidhi Blood Bank\",\n      \"Bloodline Blood Bank\",\n      \"Samarpan Blood Centre\",\n    ];\n    var locs = [\n      \"19.031413,73.016422\",\n      \"19.159587,72.845633\",\n      \"19.043413,73.015516\",\n      \"19.200753,72.974882\",\n      \"19.09339,72.913659\",\n    ];\n\n    let guid = () => {\n      var re = [];\n      let s4 = () => {\n        return Math.floor((1 + Math.random()) * 0x10000)\n          .toString(16)\n          .substring(1);\n      };\n      re.push(s4() + s4());\n      re.push(s4().toUpperCase());\n      return re;\n    };\n\n    e.preventDefault();\n\n    for (var i = 0; i < 5; i++) {\n      for (var j = 0; j < 10; j++) {\n        try {\n          await contract.methods\n            .createAsset(\n              guid()[0],\n              guid()[1],\n              \"4597 5546 465\" + j.toString(),\n              bbs[i],\n              bg[j % 8],\n              new Date(Date.now() + 42 * 86400000)\n                .toLocaleString(\"en-GB\")\n                .split(\" \")[0],\n              locs[i]\n            )\n            .send({ from: accounts[0] });\n\n          var temp45 = await contract.methods.getBloodCount().call();\n          console.log(temp45);\n        } catch (err) {\n          console.log(\"Error in creation\");\n        }\n      }\n    }\n  };\n\n  return (\n    <>\n      <ExamplesNavbar urlname=\"bbhome\" />\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <>\n            <div\n              className=\"section section-signup\"\n              style={{\n                backgroundImage:\n                  \"url(\" + require(\"assets/img/bg4.jpg\").default + \")\",\n                backgroundSize: \"cover\",\n                backgroundPosition: \"top center\",\n                minHeight: \"700px\",\n              }}\n            >\n              <Container>\n                <Row>\n                  <Card\n                    className=\"py-5 px-0 ml-auto mr-auto\"\n                    style={{\n                      borderBottomLeftRadius: \"10px\",\n                      borderTopLeftRadius: \"10px\",\n                      borderBottomRightRadius: \"10px\",\n                      borderTopRightRadius: \"10px\",\n                      maxWidth: \"800px\",\n                    }}\n                  >\n                    <Form action=\"\" className=\"form\" method=\"\">\n                      <CardHeader className=\"text-center\">\n                        <CardTitle className=\"title-up text-info\" tag=\"h3\">\n                          Fill up the following Details\n                        </CardTitle>\n                      </CardHeader>\n                      <CardBody>\n                        <div className=\"pb-4\">\n                          <hr />\n                        </div>\n                        <Row>\n                          <Col\n                            className=\"text-center ml-auto mr-auto\"\n                            lg=\"6\"\n                            md=\"8\"\n                          >\n                            <InputGroup\n                              className={\n                                \"input-lg\" +\n                                (bloodIdFocus ? \" input-group-focus\" : \"\")\n                              }\n                            >\n                              <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>\n                                  <i className=\"now-ui-icons objects_key-25\"></i>\n                                </InputGroupText>\n                              </InputGroupAddon>\n                              <Input\n                                placeholder=\"BloodId...\"\n                                type=\"text\"\n                                name=\"bloodId\"\n                                value={data.bloodId}\n                                onChange={InputEvent}\n                                onFocus={() => setBloodIdFocus(true)}\n                                onBlur={() => setBloodIdFocus(false)}\n                              ></Input>\n                            </InputGroup>\n\n                            <InputGroup\n                              className={\n                                \"input-lg\" +\n                                (batchNoFocus ? \" input-group-focus\" : \"\")\n                              }\n                            >\n                              <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>\n                                  <i className=\"now-ui-icons files_box\"></i>\n                                </InputGroupText>\n                              </InputGroupAddon>\n                              <Input\n                                placeholder=\"Batch No...\"\n                                type=\"text\"\n                                name=\"batchNo\"\n                                value={data.batchNo}\n                                onChange={InputEvent}\n                                onFocus={() => setBatchNoFocus(true)}\n                                onBlur={() => setBatchNoFocus(false)}\n                              ></Input>\n                            </InputGroup>\n\n                            <InputGroup\n                              className={\n                                \"input-lg\" +\n                                (adharFocus ? \" input-group-focus\" : \"\")\n                              }\n                            >\n                              <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>\n                                  <i className=\"now-ui-icons business_badge\"></i>\n                                </InputGroupText>\n                              </InputGroupAddon>\n                              <Input\n                                placeholder=\"Aadhar Number...\"\n                                type=\"text\"\n                                name=\"adharNo\"\n                                value={data.adharNo}\n                                onChange={InputEvent}\n                                onFocus={() => setAdharFocus(true)}\n                                onBlur={() => setAdharFocus(false)}\n                              ></Input>\n                            </InputGroup>\n\n                            <div\n                              className=\"p-2\"\n                              style={{\n                                borderBottomLeftRadius: \"50px\",\n                                borderTopLeftRadius: \"50px\",\n                                borderBottomRightRadius: \"50px\",\n                                borderTopRightRadius: \"50px\",\n                                borderStyle: \"solid\",\n                                borderColor: \" rgb(219, 219, 219)\",\n                                borderWidth: \"1px\",\n                              }}\n                            >\n                              <label>\n                                Blood Group of Patient:\n                                <select\n                                  className=\"ml-5\"\n                                  value={data.bloodGroup}\n                                  onChange={handleChange}\n                                >\n                                  <option value=\"select\">Select</option>\n                                  <option value=\"A +ve\">A +ve</option>\n                                  <option value=\"A -ve\">A -ve</option>\n                                  <option value=\"B +ve\">B +ve</option>\n                                  <option value=\"B -ve\">B -ve</option>\n                                  <option value=\"O +ve\">O +ve</option>\n                                  <option value=\"O -ve\">O -ve</option>\n                                  <option value=\"AB +ve\">AB +ve</option>\n                                  <option value=\"AB -ve\">AB -ve</option>\n                                </select>\n                              </label>\n                            </div>\n                          </Col>\n                        </Row>\n                      </CardBody>\n                      <CardFooter className=\"text-center\">\n                        <Button\n                          className=\"btn-round\"\n                          color=\"info\"\n                          size=\"lg\"\n                          onClick={formSubmit}\n                          // onClick={populate_data}\n                        >\n                          Add Details\n                        </Button>\n                      </CardFooter>\n                    </Form>\n                  </Card>\n                </Row>\n              </Container>\n            </div>\n          </>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default BloodIntake;\n","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/HospitalHome.js",["114","115"],"import React, { useState, useContext, useRef } from \"react\";\nimport Pdf from \"react-to-pdf\";\nimport BlockchainContext from \"../context/BlockChainContext\";\nimport QrReader from \"react-qr-reader\";\nimport { sha256 } from \"js-sha256\";\n\n// reactstrap components\nimport {\n  Button,\n  Container,\n  Modal,\n  ModalBody,\n  Row,\n  Col,\n  UncontrolledTooltip,\n  Badge,\n} from \"reactstrap\";\n\n// core components\nimport ExamplesNavbar from \"components/ExamplesNavbar.js\";\nimport ProfilePageHeader from \"components/ProfilePageHeader.js\";\nimport GetDistance from \"components/GetDistance.js\";\nimport GetInfoFromAadhar from \"components/AadharApi.js\";\nimport SendEmail from \"components/SendEmail.js\";\nimport globalContext from \"../context/GlobalContext\";\n\nconst ref = React.createRef();\n\nfunction HospitalHome() {\n  const { web3, accounts, contract } = useContext(BlockchainContext);\n  const { user } = useContext(globalContext);\n\n  // const [pills, setPills] = React.useState(\"2\");\n\n  const [bloodToBeSearched, setBloodToBeSearched] = useState({\n    selectedBloodGroup: \"select\",\n    name: \"\",\n  });\n\n  const [hid, setHid] = useState(\n    {\n      den: false,\n    },\n    []\n  );\n\n  const [modal1, setModal1] = React.useState(false);\n  const [bloodbankCord, updateBloodbankCord] = useState();\n\n  const reader = useRef(null);\n  const [code, setCode] = useState(\"\");\n  const [hash, setHash] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const handleScan = (data) => {\n    setCode(data);\n    console.log(\"data\", data);\n    // reader.current.reader.result\n    console.log(\"data\", reader.current.reader.result);\n    console.log(\"blooToBeSearched\", bloodToBeSearched);\n    var h = bloodToBeSearched.adharNo\n      .replaceAll(\" \", \"\")\n      .concat(bloodToBeSearched.bloodId)\n      .concat(bloodToBeSearched.batchNo);\n    console.log(\"h\", h);\n    setHash(sha256(h));\n    console.log(\"hash\", hash);\n    console.log(\"code\", code);\n    // alert(code)\n  };\n\n  const handleError = (err) => {\n    console.error(err);\n  };\n\n  const openImageDialog = () => {\n    reader.current.openImageDialog();\n  };\n\n  //----------------------------\n\n  React.useEffect(() => {\n    document.body.classList.add(\"profile-page\");\n    document.body.classList.add(\"sidebar-collapse\");\n    document.documentElement.classList.remove(\"nav-open\");\n    window.scrollTo(0, 0);\n    document.body.scrollTop = 0;\n    return function cleanup() {\n      document.body.classList.remove(\"profile-page\");\n      document.body.classList.remove(\"sidebar-collapse\");\n    };\n  }, []);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setBloodToBeSearched((preVal) => {\n      return {\n        ...preVal,\n        [name]: value,\n      };\n    });\n  };\n\n  const dummy_search = async (e) => {\n    // to be deleted\n    e.preventDefault();\n    setLoading(true);\n\n    var b_count = await contract.methods.getBloodCount().call();\n    var temp_dict_1 = {};\n    var nearest = \"\";\n    var temp_loc = \"\";\n\n    console.log(\"Finding Nearest\");\n    for (let i = 1; i <= b_count; ++i) {\n      const tag = await contract.methods.getBlood(i).call();\n      const tag1 = await contract.methods.getBlood2(i).call();\n      const tag2 = await contract.methods.getStatus(i, tag1[\"1\"]).call();\n\n      if (\n        bloodToBeSearched.selectedBloodGroup === tag[\"4\"] &&\n        tag2[\"2\"].toString().toLowerCase().includes(\"blood\") &&\n        tag2[\"3\"].toString() === \"1\"\n      ) {\n        //checking blood bank hi hai na 👆\n        // hospital ka dist -> user.location\n        // bb ka loc -> tag2['1']\n\n        temp_dict_1[tag2[\"2\"].trim()] = [\n          tag2[\"1\"], //string containaing lat long\n          (temp_dict_1[tag2[\"2\"].trim()] || [0, 0])[1] + 1, //bld count\n        ];\n      }\n    }\n\n    var temp_arr_1 = [];\n    for (let key in temp_dict_1) {\n      let gd = GetDistance(\n        parseFloat(user.location.split(\",\")[0]),\n        parseFloat(temp_dict_1[key][0].split(\",\")[0]),\n        parseFloat(user.location.split(\",\")[1]),\n        parseFloat(temp_dict_1[key][0].split(\",\")[1])\n      );\n      if (temp_dict_1[key][1] > 0) {\n        temp_arr_1.push([\n          gd, //dist\n          temp_dict_1[key][1], // bld count\n          temp_dict_1[key][0], // loc as a string\n          key, // name of bb\n        ]);\n      }\n    }\n\n    temp_arr_1.sort(function (a, b) {\n      let x = a[0] / a[1],\n        y = b[0] / b[1];\n      return x === y ? (a[0] === b[0] ? b[1] - a[1] : a[0] - b[0]) : x - y;\n    });\n\n    if (temp_arr_1[0]) {\n      nearest = temp_arr_1[0][3];\n      temp_loc = temp_arr_1[0][2];\n      updateBloodbankCord(temp_arr_1[0][2]); // save blood bank cordinates for further use like map\n      const bb_em_1 = await contract.methods\n        .getemail(nearest.toString())\n        .call();\n      console.log(\n        \"finally\",\n        temp_arr_1,\n        nearest,\n        temp_loc,\n        bloodbankCord,\n        bb_em_1\n      );\n    } else {\n      setLoading(false);\n      alert(\"Blood Not Found\");\n      return;\n    }\n\n    setLoading(false);\n  };\n\n  const search = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    if (bloodToBeSearched.selectedBloodGroup !== \"select\") {\n      // 1.1 . search for nearest blood banks\n      var b_count = await contract.methods.getBloodCount().call();\n      var temp_dict_1 = {};\n      var nearest = \"\";\n      var temp_loc = \"\";\n      var bloodToBeSearched_copy = {};\n\n      console.log(\"Finding Nearest\");\n      for (let i = 1; i <= b_count; ++i) {\n        const tag = await contract.methods.getBlood(i).call();\n        const tag1 = await contract.methods.getBlood2(i).call();\n        const tag2 = await contract.methods.getStatus(i, tag1[\"1\"]).call();\n\n        if (\n          bloodToBeSearched.selectedBloodGroup === tag[\"4\"] &&\n          tag2[\"2\"].toString().toLowerCase().includes(\"blood\") &&\n          tag2[\"3\"].toString() === \"1\"\n        ) {\n          //checking blood bank hi hai na 👆\n          // hospital ka dist -> user.location\n          // bb ka loc -> tag2['1']\n\n          temp_dict_1[tag2[\"2\"].trim()] = [\n            tag2[\"1\"], //string containaing lat long\n            (temp_dict_1[tag2[\"2\"].trim()] || [0, 0])[1] + 1, //bld count\n          ];\n        }\n      }\n\n      var temp_arr_1 = [];\n      for (let key in temp_dict_1) {\n        let gd = GetDistance(\n          parseFloat(user.location.split(\",\")[0]),\n          parseFloat(temp_dict_1[key][0].split(\",\")[0]),\n          parseFloat(user.location.split(\",\")[1]),\n          parseFloat(temp_dict_1[key][0].split(\",\")[1])\n        );\n        if (temp_dict_1[key][1] > 0) {\n          temp_arr_1.push([\n            gd, //dist\n            temp_dict_1[key][1], // bld count\n            temp_dict_1[key][0], // loc as a string\n            key, // name of bb\n          ]);\n        }\n      }\n\n      temp_arr_1.sort(function (a, b) {\n        let x = a[0] / a[1],\n          y = b[0] / b[1];\n        return x === y ? (a[0] === b[0] ? b[1] - a[1] : a[0] - b[0]) : x - y;\n      });\n\n      if (temp_arr_1[0]) {\n        nearest = temp_arr_1[0][3];\n        temp_loc = temp_arr_1[0][2];\n        updateBloodbankCord(temp_arr_1[0][2]); // save blood bank cordinates for further use like map\n        const bb_em_1 = await contract.methods\n          .getemail(nearest.toString())\n          .call();\n        console.log(\n          \"finally\",\n          temp_arr_1,\n          nearest,\n          temp_loc,\n          bloodbankCord,\n          bb_em_1\n        );\n      } else {\n        setLoading(false);\n        alert(\"Blood Not Found\");\n        return;\n      }\n\n      // 1.2 getting info about required blood from blood bank\n      console.log(\"searching\");\n      var flag = false;\n      for (let i = 1; i <= b_count; ++i) {\n        const tag = await contract.methods.getBlood(i).call();\n        const tag1 = await contract.methods.getBlood2(i).call();\n        const tag2 = await contract.methods.getStatus(i, tag1[\"1\"]).call();\n        if (\n          tag2[\"2\"].trim().toLocaleLowerCase() ===\n            nearest.trim().toLocaleLowerCase() &&\n          tag[\"4\"] === bloodToBeSearched.selectedBloodGroup &&\n          tag2[\"3\"] === \"1\"\n        ) {\n          flag = true;\n          var temp = {\n            index_of_blood_to_be_transferred: i,\n            bloodId: tag[\"0\"],\n            batchNo: tag[\"1\"],\n            email: GetInfoFromAadhar(tag[\"2\"])[\"Email\"],\n            name: GetInfoFromAadhar(tag[\"2\"])[\"Name\"],\n            adharNo: tag[\"2\"],\n            bloodGroup: tag[\"4\"],\n            age: GetInfoFromAadhar(tag[\"2\"])[\"Age\"] + \" Years\",\n            verified: tag2[\"3\"],\n            collectionDate: new Date(1000 * tag2[\"0\"])\n              .toLocaleString(\"en-GB\")\n              .split(\" \")[0]\n              .replaceAll(\"/\", \" / \"),\n            expiryDate: tag[\"5\"].replaceAll(\"/\", \" / \"),\n            currentBloodBank: tag2[\"2\"],\n            selectedBloodGroup: bloodToBeSearched.selectedBloodGroup,\n          };\n          bloodToBeSearched_copy = temp;\n          setBloodToBeSearched(temp);\n\n          console.log(`${JSON.stringify(bloodToBeSearched_copy)}`);\n        }\n      }\n      if (!flag) {\n        alert(\"Blood Not Found\");\n        setLoading(false);\n        return;\n      } else {\n        // 1.3. transfer the selected blood\n        console.log(\"transferring\");\n        console.log(`${JSON.stringify(bloodToBeSearched)}`);\n        try {\n          var info = await contract.methods\n            .transferAsset(\n              bloodToBeSearched_copy[\"index_of_blood_to_be_transferred\"], //index_of_blood_to_be_transferred\n              bloodToBeSearched_copy[\"currentBloodBank\"], //blood bank name\n              bloodToBeSearched_copy[\"verified\"],\n              user.location, //hospital cordinates\n              user.name //hospital name\n            )\n            .send({ from: accounts[0] })\n            .then(() => {\n              return;\n            });\n          console.log(info);\n\n          // 1.4. Hospitals would be notified of this transfer and asked to collect the blood physically\n          console.log(\"sending email\");\n          var email_data = {\n            to_email: user.email,\n            subject: `Blood received virtually`,\n            blood_bank: bloodToBeSearched_copy[\"currentBloodBank\"],\n            body: `<html>This is to notify <b>${user.name}</b> that <b>${bloodToBeSearched_copy[\"bloodGroup\"]}</b> blood with Id = <b>${bloodToBeSearched_copy[\"bloodId\"]}</b> and Batch No. = <b>${bloodToBeSearched_copy[\"batchNo\"]}</b> was transferred to you virtually<br></br>You can now collect it from our Blood bank. Thank you!</html>`,\n          };\n          SendEmail(email_data);\n\n          // send email to blood bank\n          console.log(\"sending email 2\");\n          const bb_em_1 = await contract.methods\n            .getemail(nearest.toString())\n            .call();\n          var email_data_2 = {\n            to_email: bb_em_1, // jisse blood aya vo\n            subject: `Blood Received Virtually`,\n            blood_bank: user.name,\n            body: `<html>This is to notify <b>${nearest}</b> that <b>${bloodToBeSearched_copy[\"bloodGroup\"]}</b> blood with Id = <b>${bloodToBeSearched_copy[\"bloodId\"]}</b> and Batch No. = <b>${bloodToBeSearched_copy[\"batchNo\"]}</b> was transferred to from your bloodbank virtually to ${user.name}<br></br>The arrival of the hospital staff for collecting blood packets is expected soon.</html>`,\n          };\n          SendEmail(email_data_2);\n\n          // 1.5. Once blood is received at the hospital it should be verified with the help of hash\n\n          // 2.1. check if blood is scarce\n          var bld_dict = {\n            \"A +ve\": 0,\n            \"A -ve\": 0,\n            \"B +ve\": 0,\n            \"B -ve\": 0,\n            \"O +ve\": 0,\n            \"O -ve\": 0,\n            \"AB +ve\": 0,\n            \"AB -ve\": 0,\n          };\n          console.log(\"in 2.1\");\n          var bg_dist_and_bg_count = {};\n          for (let i = 1; i <= b_count; ++i) {\n            const tag = await contract.methods.getBlood(i).call();\n            const tag1 = await contract.methods.getBlood2(i).call();\n            const tag2 = await contract.methods.getStatus(i, tag1[\"1\"]).call();\n            if (\n              bloodToBeSearched.selectedBloodGroup === tag[\"4\"] &&\n              tag2[\"2\"].toLowerCase().trim() !== nearest.toLowerCase().trim() &&\n              tag2[\"3\"].toString() === \"1\" &&\n              tag2[\"2\"].toString().toLowerCase().includes(\"blood\")\n            ) {\n              bg_dist_and_bg_count[tag2[\"2\"].trim()] = [\n                GetDistance(\n                  parseFloat(temp_loc.split(\",\")[0]),\n                  parseFloat(tag2[\"1\"].split(\",\")[0]),\n                  parseFloat(temp_loc.split(\",\")[1]),\n                  parseFloat(tag2[\"1\"].split(\",\")[1])\n                ),\n                (bg_dist_and_bg_count[tag2[\"2\"].trim()] || [0, 0])[1] + 1,\n              ];\n            }\n            if (\n              nearest.toLowerCase().trim() === tag2[\"2\"].toLowerCase().trim()\n            ) {\n              bld_dict[tag[\"4\"]] = bld_dict[tag[\"4\"]] + 1;\n            }\n          }\n\n          var nearest_bb_sorted = [];\n          for (var arr in bg_dist_and_bg_count) {\n            if (bg_dist_and_bg_count[arr][1] >= 2) {\n              // for count greater than 2\n              nearest_bb_sorted.push([\n                bg_dist_and_bg_count[arr][0],\n                bg_dist_and_bg_count[arr][1],\n                arr,\n              ]);\n            }\n          }\n\n          console.log(\"nearest_bb_sorted bef srt\", nearest_bb_sorted);\n\n          nearest_bb_sorted.sort(function (a, b) {\n            let x = a[0] / a[1],\n              y = b[0] / b[1];\n            return x === y\n              ? a[0] === b[0]\n                ? b[1] - a[1]\n                : a[0] - b[0]\n              : x - y;\n          });\n\n          console.log(\"nearest_bb_sorted after srt\", nearest_bb_sorted);\n\n          if (\n            bld_dict[bloodToBeSearched.selectedBloodGroup] <= 0 &&\n            nearest_bb_sorted.length !== 0\n          ) {\n            for (let i = 1; i <= b_count; ++i) {\n              const tag = await contract.methods.getBlood(i).call();\n              const tag1 = await contract.methods.getBlood2(i).call();\n              const tag2 = await contract.methods\n                .getStatus(i, tag1[\"1\"])\n                .call();\n              // 2.2 blood bank to blood bank transfer\n              if (\n                nearest_bb_sorted[0][2].toLowerCase().trim() ===\n                  tag2[\"2\"].toLowerCase().trim() &&\n                bloodToBeSearched.selectedBloodGroup === tag[\"4\"]\n              ) {\n                try {\n                  var info2 = await contract.methods\n                    .transferAsset(\n                      i, //index_of_blood_to_be_transferred\n                      tag2[\"2\"], //blood bank name\n                      tag2[\"3\"],\n                      temp_loc, //curr bb cordinates\n                      nearest //bb name\n                    )\n                    .send({ from: accounts[0] });\n                  console.log(info2);\n\n                  // 2.3 both BB would be notified of this transfer and asked to collect the blood physically\n                  console.log(\"sending email 3\");\n                  const bb_em_2 = await contract.methods\n                    .getemail(nearest.toString())\n                    .call();\n                  var email_data_3 = {\n                    to_email: bb_em_2, // jiska scare hai vo\n                    subject: `Blood Received Virtually`,\n                    blood_bank: tag2[\"2\"],\n                    body: `<html>This is to notify <b>${nearest},</b> that <b>${tag[\"4\"]}</b> blood with Id = <b>${tag[\"0\"]}</b> and Batch No. = <b>${tag[\"1\"]}</b> was transferred to you virtually<br></br>You can now collect it from our Blood bank. Thank you!</html>`,\n                  };\n                  SendEmail(email_data_3);\n\n                  console.log(\"sending email 4\");\n                  const bb_em_3 = await contract.methods\n                    .getemail(tag2[\"2\"].toString())\n                    .call();\n                  var email_data_4 = {\n                    to_email: bb_em_3, // jisne blood diya vo\n                    subject: `Blood sent virtually`,\n                    blood_bank: nearest,\n                    body: `<html>This is to notify <b>${tag2[\"2\"]}</b> that <b>${tag[\"4\"]}</b> blood with Id = <b>${tag[\"0\"]}</b> and Batch No. = <b>${tag[\"1\"]}</b> was transferred virtually to <b>${nearest}</b>. <br></br> You can expect them to arrive at your Blood bank to collect it. Thank you!</html>`,\n                  };\n                  SendEmail(email_data_4);\n\n                  setHid({ den: false });\n                  setModal1(true);\n                  setLoading(false);\n                  return;\n                } catch (err) {\n                  setLoading(false);\n                  console.log(\"Error in BB to BB Transfer function\", err);\n                }\n              }\n            }\n          }\n        } catch (err) {\n          setLoading(false);\n          console.log(\"Error in Transfer function\", err);\n          return;\n        }\n\n        setHid({ den: false });\n        setLoading(false);\n        setModal1(true);\n        // add to blockchain\n      }\n    } else {\n      alert(`${\"Please Select a Blood Group\"}`);\n    }\n  };\n\n  return (\n    <>\n      <ExamplesNavbar urlname=\"hhome\" />\n      <div className=\"wrapper\">\n        <ProfilePageHeader\n          name={user.name.toUpperCase()}\n          address={user.add}\n          bloodcount={{}}\n        />\n        <div className=\"section\">\n          <Container>\n            <div className=\"button-container row justify-content-center\">\n              <Button\n                className=\"btn-round\"\n                color=\"info\"\n                size=\"lg\"\n                id=\"emailtooltip\"\n              >\n                {user.email}\n              </Button>\n              <UncontrolledTooltip delay={0} target=\"emailtooltip\">\n                Email us here\n              </UncontrolledTooltip>\n              <div className=\"mx-2\"></div>\n              <Button\n                className=\"btn-round\"\n                color=\"info\"\n                size=\"lg\"\n                id=\"phonetooltip\"\n              >\n                {user.no}\n              </Button>\n              <UncontrolledTooltip delay={0} target=\"phonetooltip\">\n                Call us here\n              </UncontrolledTooltip>\n              <div className=\"mx-2\"></div>\n              <Button\n                className=\"btn-round\"\n                color=\"info\"\n                size=\"lg\"\n                id=\"addresstooltip\"\n              >\n                {user.add}\n              </Button>\n              <UncontrolledTooltip delay={0} target=\"addresstooltip\">\n                Visit us here\n              </UncontrolledTooltip>\n            </div>\n            <div className=\"section section-contact-us text-center\">\n              <Container>\n                <h2 className=\"title\">Ask for Blood</h2>\n                <p className=\"description\">\n                  let us find an optimal blood bank for your patient\n                </p>\n                <Row>\n                  <Col\n                    className=\"text-center ml-auto mr-auto mt-4\"\n                    lg=\"6\"\n                    md=\"8\"\n                  >\n                    <div\n                      className=\"p-2\"\n                      style={{\n                        borderBottomLeftRadius: \"50px\",\n                        borderTopLeftRadius: \"50px\",\n                        borderBottomRightRadius: \"50px\",\n                        borderTopRightRadius: \"50px\",\n                        borderStyle: \"solid\",\n                        borderColor: \" rgb(219, 219, 219)\",\n                        borderWidth: \"1px\",\n                      }}\n                    >\n                      <label>\n                        Blood Group of Patient :\n                        <select\n                          className=\"ml-5\"\n                          name=\"selectedBloodGroup\"\n                          value={bloodToBeSearched.selectedBloodGroup}\n                          onChange={handleChange}\n                        >\n                          <option value=\"select\">Select</option>\n                          <option value=\"A +ve\">A +ve</option>\n                          <option value=\"A -ve\">A -ve</option>\n                          <option value=\"B +ve\">B +ve</option>\n                          <option value=\"B -ve\">B -ve</option>\n                          <option value=\"O +ve\">O +ve</option>\n                          <option value=\"O -ve\">O -ve</option>\n                          <option value=\"AB +ve\">AB +ve</option>\n                          <option value=\"AB -ve\">AB -ve</option>\n                        </select>\n                      </label>\n                    </div>\n                    <div className=\"send-button\">\n                      <Button\n                        block\n                        className=\"btn-round\"\n                        color=\"info\"\n                        // onClick={dummy_search}\n                        onClick={search}\n                        size=\"lg\"\n                      >\n                        {!loading ? \"Search for Blood\" : \"Searching ...\"}\n                      </Button>\n                      <Modal isOpen={modal1} toggle={() => setModal1(false)}>\n                        <div className=\"modal-header justify-content-center pt-0\">\n                          <h4 className=\"title title-up\">Blood Details</h4>\n                        </div>\n                        <ModalBody>\n                          <p className=\"px-3 text-justify\">\n                            Following are the details of the blood you will\n                            receive. please verify the hash once blood is\n                            recieved\n                          </p>\n                          <div className=\"px-3 pt-2\">\n                            <div>\n                              <h5 className=\"\">\n                                <b className=\"mr-4\">Name:</b>\n                                {bloodToBeSearched.name}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 className=\"\">\n                                <b className=\"mr-4\">Email ID:</b>\n                                {bloodToBeSearched.email}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 className=\"card-title\">\n                                <b className=\"mr-4\">Aadhar No: </b>\n                                {bloodToBeSearched.adharNo}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 className=\"card-title\">\n                                <b className=\"mr-4\">Blood ID: </b>\n                                {bloodToBeSearched.bloodId}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 className=\"card-title\">\n                                <b className=\"mr-4\">Batch No: </b>\n                                {bloodToBeSearched.batchNo}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 className=\"card-title\">\n                                <b className=\"mr-4\">Blood Group: </b>\n                                {bloodToBeSearched.bloodGroup}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 className=\"card-title\">\n                                <b className=\"mr-4\">Received from : </b>\n                                {bloodToBeSearched.currentBloodBank}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 className=\"card-title\">\n                                <b className=\"mr-4\">Collection Date: </b>\n                                {bloodToBeSearched.collectionDate}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 className=\"card-title\">\n                                <b className=\"mr-4\">Age: </b>\n                                {bloodToBeSearched.age}\n                              </h5>\n                            </div>\n                            {/* ******************************************************************** */}\n                            <div>\n                              <h5 className=\"card-title\">\n                                <b className=\"mr-4\">Verification Status: </b>\n                                {bloodToBeSearched.verified === \"0\" && (\n                                  <Badge color=\"warning\" className=\"py-1\">\n                                    Not yet Tested\n                                  </Badge>\n                                )}\n\n                                {bloodToBeSearched.verified === \"1\" && (\n                                  <Badge color=\"success\" className=\"py-1\">\n                                    Tested {\"&\"} Safe\n                                  </Badge>\n                                )}\n\n                                {bloodToBeSearched.verified === \"2\" && (\n                                  <Badge color=\"danger\" className=\"py-1\">\n                                    Tested {\"&\"} Unsafe\n                                  </Badge>\n                                )}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 class=\"card-title\">\n                                <b className=\"mr-4 \">\n                                  <a\n                                    target=\"1\"\n                                    href={\n                                      \"http://maps.google.com/maps?q=\" +\n                                      bloodbankCord +\n                                      \"&ll=\" +\n                                      bloodbankCord +\n                                      \"&z=20\"\n                                    }\n                                  >\n                                    See on Maps:{\" \"}\n                                  </a>\n                                </b>\n                                <div className=\"row justify-content-center  mt-2\">\n                                  <iframe\n                                    style={{ borderStyle: \"solid\" }}\n                                    borderStyle=\"solid\"\n                                    title=\"maps\"\n                                    src={\n                                      \"http://maps.google.com/maps?q=\" +\n                                      bloodbankCord +\n                                      \"&ll=\" +\n                                      bloodbankCord +\n                                      \"&z=20&output=embed\"\n                                    }\n                                    height=\"300\"\n                                    width=\"420\"\n                                  ></iframe>\n                                </div>\n                              </h5>\n                            </div>\n                          </div>\n                        </ModalBody>\n                        <div className=\"modal-footer mb-3\">\n                          <Pdf\n                            targetRef={ref}\n                            filename={\n                              \"Receipt_\" + new Date().toLocaleString() + \".pdf\"\n                            }\n                          >\n                            {({ toPdf }) => (\n                              <Button\n                                color=\"success\"\n                                type=\"button\"\n                                onClick={toPdf}\n                              >\n                                Dowload Receipt\n                              </Button>\n                            )}\n                          </Pdf>\n                          <Button\n                            color=\"info\"\n                            type=\"button\"\n                            variant=\"contained\"\n                            onClick={() => {\n                              openImageDialog();\n                            }}\n                          >\n                            Scan and Check\n                          </Button>\n                          <Button\n                            color=\"primary\"\n                            type=\"button\"\n                            onClick={() => {\n                              setModal1(false);\n                              setHid({ den: true });\n                              setCode(\"\");\n                              setHash(\"\");\n                            }}\n                          >\n                            Close\n                          </Button>\n                        </div>\n                        <div hidden={code === \"\"}>\n                          <div className=\"row px-3\">\n                            <QrReader\n                              ref={reader}\n                              className=\"m-1\"\n                              onError={handleError}\n                              style={{ width: \"40%\" }}\n                              onScan={handleScan}\n                              legacyMode\n                            />\n                            <div className=\"col m-3\">\n                              <h6>Hash from QR :</h6>\n                              {code && (\n                                <span>{code.substring(0, 15) + \" ...\"}</span>\n                              )}\n                              <hr />\n                              <h6>Hash generated : </h6>\n                              {hash && (\n                                <span>{hash.substring(0, 15) + \" ...\"}</span>\n                              )}\n                              <hr />\n                              {code === hash && (\n                                <Badge color=\"success\" className=\"py-1\">\n                                  Hash verification successful\n                                </Badge>\n                              )}\n\n                              {code !== hash && (\n                                <Badge color=\"danger\" className=\"py-1\">\n                                  Hash verification unsuccessful\n                                </Badge>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      </Modal>\n                    </div>\n                  </Col>\n                </Row>\n              </Container>\n            </div>\n          </Container>\n        </div>\n      </div>\n\n      {/* for downloading receipt */}\n      <div\n        hidden={hid.den}\n        className=\"mt-5\"\n        ref={ref}\n        style={{ maxWidth: \"800px\" }}\n      >\n        {bloodToBeSearched.name !== \"\" && (\n          <>\n            <div className=\"p-1\"></div>\n            <div\n              className=\"px-5 pt-5 m-5 pb-4\"\n              style={{ backgroundColor: \"rgba(211,211,211,0.2)\" }}\n            >\n              <div className=\"font-weight-bold \">\n                <div>HOSPITAL NAME : {user.name.toUpperCase()}</div>\n                <br />\n                <div>Date : {new Date().toLocaleString().split(\",\")[0]}</div>\n              </div>\n              <div className=\"font-weight-bold\">\n                <br />\n\n                <div>\n                  Address :{\" \"}\n                  {\n                    \" Husaini Colony, Vasai West, Vasai-Virar, Maharashtra 401202\"\n                  }\n                </div>\n                <br />\n                <div>Contact : {user.email + \" , \" + user.no}</div>\n              </div>\n              <br />\n              <hr\n                className=\"px-2\"\n                style={{\n                  border: \"none\",\n                  height: \"1px\",\n                  backgroundColor: \"#333\",\n                }}\n              />\n              <div className=\"\">\n                <div className=\"\">\n                  <br />\n                  <div>\n                    <h5 className=\"\">\n                      <b className=\"mr-4\">Name :</b>\n                      {bloodToBeSearched.name}\n                    </h5>\n                  </div>\n                  <div>\n                    <h5 className=\"\">\n                      <b className=\"mr-4\">Email ID :</b>\n                      {bloodToBeSearched.email}\n                    </h5>\n                  </div>\n                  <div>\n                    <h5 className=\"card-title\">\n                      <b className=\"mr-4\">Aadhar No : </b>\n                      {bloodToBeSearched.adharNo.substring(0, 3) +\n                        \"* * * * * *\" +\n                        bloodToBeSearched.adharNo.substring(\n                          bloodToBeSearched.adharNo.length - 3,\n                          bloodToBeSearched.adharNo.length\n                        )}\n                    </h5>\n                  </div>\n                  <div>\n                    <h5 className=\"card-title\">\n                      <b className=\"mr-4\">Blood ID : </b>\n                      {bloodToBeSearched.bloodId}\n                    </h5>\n                  </div>\n                  <div>\n                    <h5 className=\"card-title\">\n                      <b className=\"mr-4\">Batch No : </b>\n                      {bloodToBeSearched.batchNo}\n                    </h5>\n                  </div>\n                  <div>\n                    <h5 className=\"card-title\">\n                      <b className=\"mr-4\">Blood Group : </b>\n                      {bloodToBeSearched.bloodGroup}\n                    </h5>\n                  </div>\n                  <div>\n                    <h5 className=\"card-title\">\n                      <b className=\"mr-4\">Received from : </b>\n                      {bloodToBeSearched.currentBloodBank}\n                    </h5>\n                  </div>\n                  <div>\n                    <h5 className=\"card-title\">\n                      <b className=\"mr-4\">Collection Date : </b>\n                      {bloodToBeSearched.collectionDate}\n                    </h5>\n                  </div>\n                  <div>\n                    <h5 className=\"card-title\">\n                      <b className=\"mr-4\">Age : </b>\n                      {bloodToBeSearched.age}\n                    </h5>\n                  </div>\n                  {/* ******************************************************************** */}\n                  <div>\n                    <h5 className=\"card-title\">\n                      <b className=\"mr-4\">Verification Status : </b>\n                      {bloodToBeSearched.verified === \"0\" && (\n                        <Badge color=\"warning\" className=\"py-1\">\n                          Not yet Tested\n                        </Badge>\n                      )}\n\n                      {bloodToBeSearched.verified === \"1\" && (\n                        <Badge color=\"success\" className=\"py-1\">\n                          Tested {\"&\"} Safe\n                        </Badge>\n                      )}\n\n                      {bloodToBeSearched.verified === \"2\" && (\n                        <Badge color=\"success\" className=\"py-1\">\n                          Tested {\"&\"} Unsafe\n                        </Badge>\n                      )}\n                    </h5>\n                  </div>\n                  <br />\n                  <br />\n                  <div>\n                    <div className=\"row px-3\">\n                      {reader.current && (\n                        <img\n                          src={reader.current.reader.result}\n                          alt={reader.current.reader.result}\n                          style={{\n                            width: \"200px\",\n                            height: \"200px\",\n                          }}\n                        />\n                      )}\n\n                      <div className=\"col m-3\">\n                        <h6>Hash from QR :</h6>\n                        {code && <span>{code.substring(0, 15) + \" ...\"}</span>}\n                        <hr />\n                        <h6>Hash generated : </h6>\n                        {hash && <span>{hash.substring(0, 15) + \" ...\"}</span>}\n                        <hr />\n                        {code === hash && (\n                          <Badge color=\"success\" className=\"py-1\">\n                            Hash verification successful\n                          </Badge>\n                        )}\n\n                        {code !== hash && (\n                          <Badge color=\"danger\" className=\"py-1\">\n                            Hash verification unsuccessful\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <br />\n                </div>\n              </div>\n\n              <hr\n                className=\"px-2\"\n                style={{\n                  border: \"none\",\n                  height: \"1px\",\n                  backgroundColor: \"#333\",\n                }}\n              />\n              {/* <br /> */}\n              <div>\n                <p>\n                  <b>Note : </b> This document is digitally verified\n                </p>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default HospitalHome;\n","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/views/temp.js",["116","117","118"],"import React, { useState } from \"react\";\nimport Pdf from \"react-to-pdf\";\n\n// reactstrap components\nimport {\n  Button,\n  Container,\n  Modal,\n  ModalBody,\n  Row,\n  Col,\n  UncontrolledTooltip,\n  Badge,\n} from \"reactstrap\";\n\n// core components\nimport ExamplesNavbar from \"components/ExamplesNavbar.js\";\nimport ProfilePageHeader from \"components/ProfilePageHeader.js\";\n\nconst ref = React.createRef();\n\nfunction Temp() {\n  // const [pills, setPills] = React.useState(\"2\");\n\n  const [data, setData] = useState({\n    selectedBloodGroup: \"select\",\n    name: \"\",\n  });\n\n  const [hid, setHid] = useState(\n    {\n      den: false,\n    },\n    []\n  );\n\n  const [modal1, setModal1] = React.useState(false);\n\n  React.useEffect(() => {\n    document.body.classList.add(\"profile-page\");\n    document.body.classList.add(\"sidebar-collapse\");\n    document.documentElement.classList.remove(\"nav-open\");\n    window.scrollTo(0, 0);\n    document.body.scrollTop = 0;\n    return function cleanup() {\n      document.body.classList.remove(\"profile-page\");\n      document.body.classList.remove(\"sidebar-collapse\");\n    };\n  }, []);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setData((preVal) => {\n      return {\n        ...preVal,\n        [name]: value,\n      };\n    });\n  };\n\n  const search = (e) => {\n    e.preventDefault();\n    if (true) {\n      console.log(`${JSON.stringify(data)}`);\n      setData({\n        bloodId: \"BfdaBf\",\n        batchNo: \"szfvdszfv\",\n        email: \"raj.gorhekar@spit.ac.in\",\n        name: \"Raj Gorhekar\",\n        adharNo: \"4597 5546 4654\",\n        bloodGroup: \"AB +ve\",\n        age: \"20 years\",\n        verified: true,\n        collectionDate: \"9/18/2021\",\n        currentBloodBank: \"Vijayee Blood Bank\",\n        currentPosition: \"\",\n        timestamp: \"9/18/2021, 4:13:10 PM\",\n        selectedBloodGroup: data.selectedBloodGroup,\n      });\n\n      setHid({ den: false });\n      setModal1(true);\n      // add to blockchain\n    } else {\n      alert(`${\"Enter Valid credentials\"}`);\n    }\n  };\n\n  return (\n    <>\n      <ExamplesNavbar urlname=\"hhome\" />\n      <div className=\"wrapper\">\n        <ProfilePageHeader\n          name={\"Ankur Hospital  Multispeciality Hospital \".toUpperCase()}\n          address=\"204, 2nd Floor Thakur Tower Raja Chatrapati Shivaji Marg, Gaothan Rd, Virar West, Mumbai, Maharashtra 401303\"\n          bloodcount={{}}\n        />\n        <div className=\"section\">\n          <Container>\n            <div className=\"button-container row\">\n              <Button\n                className=\"btn-round\"\n                color=\"info\"\n                size=\"lg\"\n                id=\"emailtooltip\"\n              >\n                {\"ankurhospital@gmail.com\"}\n              </Button>\n              <UncontrolledTooltip delay={0} target=\"emailtooltip\">\n                Email us here\n              </UncontrolledTooltip>\n              <div className=\"mx-2\"></div>\n              <Button\n                className=\"btn-round\"\n                color=\"info\"\n                size=\"lg\"\n                id=\"phonetooltip\"\n              >\n                {\"+91 8446417448\"}\n              </Button>\n              <UncontrolledTooltip delay={0} target=\"phonetooltip\">\n                Call us here\n              </UncontrolledTooltip>\n              <div className=\"mx-2\"></div>\n              <Button\n                className=\"btn-round\"\n                color=\"info\"\n                size=\"lg\"\n                id=\"addresstooltip\"\n              >\n                {\" Husaini Colony, Vasai West, Vasai-Virar, Maharashtra 401202\"}\n              </Button>\n              <UncontrolledTooltip delay={0} target=\"addresstooltip\">\n                Visit us here\n              </UncontrolledTooltip>\n            </div>\n            {/* <h3 className=\"title\">About me</h3>\n            <h5 className=\"description\">\n              An artist of considerable range, Ryan — the name taken by\n              Melbourne-raised, Brooklyn-based Nick Murphy — writes, performs\n              and records all of his own music, giving it a warm, intimate feel\n              with a solid groove structure. An artist of considerable range.\n            </h5> */}\n\n            <div className=\"section section-contact-us text-center\">\n              <Container>\n                <h2 className=\"title\">Ask for Blood</h2>\n                <p className=\"description\">\n                  let us find an optimal blood bank for your patient\n                </p>\n                <Row>\n                  <Col\n                    className=\"text-center ml-auto mr-auto mt-4\"\n                    lg=\"6\"\n                    md=\"8\"\n                  >\n                    <div\n                      className=\"p-2\"\n                      style={{\n                        borderBottomLeftRadius: \"50px\",\n                        borderTopLeftRadius: \"50px\",\n                        borderBottomRightRadius: \"50px\",\n                        borderTopRightRadius: \"50px\",\n                        borderStyle: \"solid\",\n                        borderColor: \" rgb(219, 219, 219)\",\n                        borderWidth: \"1px\",\n                      }}\n                    >\n                      <label>\n                        Blood Group of Patient :\n                        <select\n                          className=\"ml-5\"\n                          name=\"selectedBloodGroup\"\n                          value={data.selectedBloodGroup}\n                          onChange={handleChange}\n                        >\n                          <option value=\"select\">Select</option>\n                          <option value=\"A +ve\">A +ve</option>\n                          <option value=\"A -ve\">A -ve</option>\n                          <option value=\"B +ve\">B +ve</option>\n                          <option value=\"B -ve\">B -ve</option>\n                          <option value=\"O +ve\">O +ve</option>\n                          <option value=\"O -ve\">O -ve</option>\n                          <option value=\"AB +ve\">AB +ve</option>\n                          <option value=\"AB -ve\">AB -ve</option>\n                        </select>\n                      </label>\n                    </div>\n                    <div className=\"send-button\">\n                      <Button\n                        block\n                        className=\"btn-round\"\n                        color=\"info\"\n                        onClick={search}\n                        size=\"lg\"\n                      >\n                        Search for Blood\n                      </Button>\n                      <Modal isOpen={modal1} toggle={() => setModal1(false)}>\n                        <div className=\"modal-header justify-content-center pt-0\">\n                          <h4 className=\"title title-up\">Blood Details</h4>\n                        </div>\n                        <ModalBody>\n                          <p className=\"px-3 text-justify\">\n                            Following are the details of the blood you will\n                            receive. please verify the hash once blood is\n                            recieved\n                          </p>\n\n                          <div className=\"px-3 pt-2\">\n                            <div>\n                              <h5 class=\"\">\n                                <b className=\"mr-4\">Name:</b>\n                                {data.name}\n                              </h5>\n                            </div>\n                            {/* ******************************************************************** */}\n                            <div>\n                              <h5 class=\"card-title\">\n                                <b className=\"mr-4\">Verification Status: </b>\n                                {data.verified === false && (\n                                  <Badge color=\"warning\" className=\"py-1\">\n                                    Not yet Tested\n                                  </Badge>\n                                )}\n\n                                {data.verified === true && (\n                                  <Badge color=\"success\" className=\"py-1\">\n                                    Tested {\"&\"} Safe\n                                  </Badge>\n                                )}\n                              </h5>\n                            </div>\n                            <div>\n                              <h5 class=\"card-title\">\n                                <b className=\"mr-4 \">\n                                  <a\n                                    target=\"1\"\n                                    href=\"http://maps.google.com/maps?q=19.031413,73.016422&ll=19.031413,73.016422&z=17\"\n                                  >\n                                    See on Maps:{\" \"}\n                                  </a>\n                                </b>\n                                <div className=\"row justify-content-center  mt-2\">\n                                  <iframe\n                                    style={{ borderStyle: \"solid\" }}\n                                    borderStyle=\"solid\"\n                                    title=\"maps\"\n                                    src=\"http://maps.google.com/maps?q=19.031413,73.016422&z=17&output=embed\"\n                                    height=\"300\"\n                                    width=\"420\"\n                                  ></iframe>\n                                </div>\n                              </h5>\n                            </div>\n                          </div>\n                        </ModalBody>\n                        <div className=\"modal-footer mb-3\">\n                          <Button\n                            color=\"info\"\n                            type=\"button\"\n                            onClick={() => {\n                              setModal1(false);\n                              setHid({ den: true });\n                            }}\n                          >\n                            Scan and Check\n                          </Button>\n                          <Button\n                            color=\"primary\"\n                            type=\"button\"\n                            onClick={() => {\n                              setModal1(false);\n                              setHid({ den: true });\n                            }}\n                          >\n                            Close\n                          </Button>\n                        </div>\n                      </Modal>\n                    </div>\n                  </Col>\n                </Row>\n              </Container>\n            </div>\n          </Container>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Temp;\n","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/context/GlobalContext.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/ExamplesNavbar.js",["119"],"import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\n// reactstrap components\nimport {\n  Collapse,\n  NavbarBrand,\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  UncontrolledTooltip,\n} from \"reactstrap\";\n\nfunction ExamplesNavbar(props) {\n  const [navbarColor, setNavbarColor] = React.useState(\"navbar-transparent\");\n  const [collapseOpen, setCollapseOpen] = React.useState(false);\n  React.useEffect(() => {\n    const updateNavbarColor = () => {\n      if (\n        document.documentElement.scrollTop > 399 ||\n        document.body.scrollTop > 399\n      ) {\n        setNavbarColor(\"\");\n      } else if (\n        document.documentElement.scrollTop < 400 ||\n        document.body.scrollTop < 400\n      ) {\n        setNavbarColor(\"navbar-transparent\");\n      }\n    };\n    window.addEventListener(\"scroll\", updateNavbarColor);\n    return function cleanup() {\n      window.removeEventListener(\"scroll\", updateNavbarColor);\n    };\n  });\n\n  const urlname = props.urlname;\n  const history = useHistory();\n\n  const logout = () => {\n    history.push(\"/\");\n  };\n\n  const getrefreshurl = () => {\n    if (urlname === \"landing\" || urlname === \"login\") {\n      return \"/\";\n    } else if (urlname === \"bbhome\") {\n      return \"bloodbankhome\";\n    } else if (urlname === \"hhome\") {\n      return \"hospitalhome\";\n    } else {\n      return \"/\";\n    }\n  };\n\n  return (\n    <>\n      {collapseOpen ? (\n        <div\n          id=\"bodyClick\"\n          onClick={() => {\n            document.documentElement.classList.toggle(\"nav-open\");\n            setCollapseOpen(false);\n          }}\n        />\n      ) : null}\n      <Navbar className={\"fixed-top \" + navbarColor} color=\"info\" expand=\"lg\">\n        <Container>\n          <div className=\"navbar-translate\">\n            <NavbarBrand id=\"navbar-brand\">\n              <NavLink to={getrefreshurl()} tag={Link}>\n                Blood Distribution\n              </NavLink>\n            </NavbarBrand>\n\n            <button\n              className=\"navbar-toggler navbar-toggler\"\n              onClick={() => {\n                document.documentElement.classList.toggle(\"nav-open\");\n                setCollapseOpen(!collapseOpen);\n              }}\n              aria-expanded={collapseOpen}\n              type=\"button\"\n            >\n              <span className=\"navbar-toggler-bar top-bar\"></span>\n              <span className=\"navbar-toggler-bar middle-bar\"></span>\n              <span className=\"navbar-toggler-bar bottom-bar\"></span>\n            </button>\n          </div>\n          <Collapse\n            className=\"justify-content-end\"\n            isOpen={collapseOpen}\n            navbar\n          >\n            <Nav navbar>\n              {urlname === \"bbhome\" && (\n                <>\n                  <NavItem>\n                    <NavLink\n                      to={{\n                        pathname: \"/bloodintake\",\n                        // form vla page banane ka h\n                        // hospital home\n                        // aboutProps: {\n                        //   name: \"Blood bank\",\n                        // },\n                      }}\n                      tag={Link}\n                    >\n                      Blood Intake Page\n                    </NavLink>\n                  </NavItem>\n                </>\n              )}\n              {(urlname === \"bbhome\" || urlname === \"hhome\") && (\n                <NavItem>\n                  <NavLink\n                    to={{\n                      pathname: \"/\",\n                      aboutProps: {\n                        name: \"Blood bank\",\n                      },\n                    }}\n                    onClick={logout}\n                    tag={Link}\n                  >\n                    Logout\n                  </NavLink>\n                </NavItem>\n              )}\n\n              {(urlname === \"landing\" || urlname === \"login\" || urlname === \"timeline\") && (\n                <>\n                  <NavItem>\n                    <NavLink\n                      to={{\n                        pathname: \"/timeline\",\n                      }}\n                      tag={Link}\n                    >\n                      Track\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      to={{\n                        pathname: \"/login\",\n                        aboutProps: {\n                          name: \"Blood bank\",\n                        },\n                      }}\n                      tag={Link}\n                    >\n                      Login as Blood bank\n                    </NavLink>\n                  </NavItem>\n                  <NavItem>\n                    <NavLink\n                      to={{\n                        pathname: \"/login\",\n                        aboutProps: {\n                          name: \"Hospital\",\n                        },\n                      }}\n                      tag={Link}\n                    >\n                      Login as Hospital\n                    </NavLink>\n                  </NavItem>\n                </>\n              )}\n              {/* <NavItem>\n                <NavLink id=\"twitter-tooltip\">\n                  <i className=\"fab fa-twitter\"></i>\n                  <p className=\"d-lg-none d-xl-none\">Twitter</p>\n                </NavLink>\n                <UncontrolledTooltip target=\"#twitter-tooltip\">\n                  Follow us on Twitter\n                </UncontrolledTooltip>\n              </NavItem>\n              <NavItem>\n                <NavLink id=\"facebook-tooltip\">\n                  <i className=\"fab fa-facebook-square\"></i>\n                  <p className=\"d-lg-none d-xl-none\">Facebook</p>\n                </NavLink>\n                <UncontrolledTooltip target=\"#facebook-tooltip\">\n                  Like us on Facebook\n                </UncontrolledTooltip>\n              </NavItem>\n              <NavItem>\n                <NavLink id=\"instagram-tooltip\">\n                  <i className=\"fab fa-instagram\"></i>\n                  <p className=\"d-lg-none d-xl-none\">Instagram</p>\n                </NavLink>\n                <UncontrolledTooltip target=\"#instagram-tooltip\">\n                  Follow us on Instagram\n                </UncontrolledTooltip>\n              </NavItem> */}\n            </Nav>\n          </Collapse>\n        </Container>\n      </Navbar>\n    </>\n  );\n}\n\nexport default ExamplesNavbar;\n","/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/SendEmail.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/LandingPageHeader.js",["120"],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/AadharApi.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/GetDistance.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/ProfilePageHeader.js",[],"/home/karan-palan/Desktop/Hackathons/KJHack-Brogrammers/src/components/DefaultFooter.js",[],{"ruleId":"121","severity":1,"message":"122","line":3,"column":25,"nodeType":"123","messageId":"124","endLine":3,"endColumn":30},{"ruleId":"121","severity":1,"message":"125","line":3,"column":32,"nodeType":"123","messageId":"124","endLine":3,"endColumn":38},{"ruleId":"121","severity":1,"message":"126","line":3,"column":40,"nodeType":"123","messageId":"124","endLine":3,"endColumn":48},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"121","severity":1,"message":"131","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":26},{"ruleId":"121","severity":1,"message":"132","line":6,"column":8,"nodeType":"123","messageId":"124","endLine":6,"endColumn":16},{"ruleId":"121","severity":1,"message":"133","line":8,"column":10,"nodeType":"123","messageId":"124","endLine":8,"endColumn":23},{"ruleId":"121","severity":1,"message":"134","line":1,"column":17,"nodeType":"123","messageId":"124","endLine":1,"endColumn":25},{"ruleId":"121","severity":1,"message":"135","line":26,"column":11,"nodeType":"123","messageId":"124","endLine":26,"endColumn":15},{"ruleId":"121","severity":1,"message":"136","line":57,"column":9,"nodeType":"123","messageId":"124","endLine":57,"endColumn":22},{"ruleId":"137","severity":1,"message":"138","line":278,"column":25,"nodeType":"139","endLine":278,"endColumn":81},{"ruleId":"121","severity":1,"message":"135","line":29,"column":11,"nodeType":"123","messageId":"124","endLine":29,"endColumn":15},{"ruleId":"121","severity":1,"message":"140","line":29,"column":17,"nodeType":"123","messageId":"124","endLine":29,"endColumn":25},{"ruleId":"121","severity":1,"message":"141","line":30,"column":11,"nodeType":"123","messageId":"124","endLine":30,"endColumn":19},{"ruleId":"121","severity":1,"message":"142","line":35,"column":9,"nodeType":"123","messageId":"124","endLine":35,"endColumn":16},{"ruleId":"143","severity":1,"message":"144","line":106,"column":21,"nodeType":"123","messageId":"145","endLine":106,"endColumn":22},{"ruleId":"121","severity":1,"message":"146","line":1,"column":39,"nodeType":"123","messageId":"124","endLine":1,"endColumn":48},{"ruleId":"121","severity":1,"message":"135","line":27,"column":11,"nodeType":"123","messageId":"124","endLine":27,"endColumn":15},{"ruleId":"121","severity":1,"message":"140","line":27,"column":17,"nodeType":"123","messageId":"124","endLine":27,"endColumn":25},{"ruleId":"147","severity":1,"message":"148","line":121,"column":6,"nodeType":"149","endLine":121,"endColumn":8,"suggestions":"150"},{"ruleId":"121","severity":1,"message":"135","line":31,"column":11,"nodeType":"123","messageId":"124","endLine":31,"endColumn":15},{"ruleId":"121","severity":1,"message":"136","line":137,"column":9,"nodeType":"123","messageId":"124","endLine":137,"endColumn":22},{"ruleId":"121","severity":1,"message":"135","line":30,"column":11,"nodeType":"123","messageId":"124","endLine":30,"endColumn":15},{"ruleId":"121","severity":1,"message":"151","line":104,"column":9,"nodeType":"123","messageId":"124","endLine":104,"endColumn":21},{"ruleId":"121","severity":1,"message":"152","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":11},{"ruleId":"121","severity":1,"message":"153","line":20,"column":7,"nodeType":"123","messageId":"124","endLine":20,"endColumn":10},{"ruleId":"121","severity":1,"message":"154","line":30,"column":10,"nodeType":"123","messageId":"124","endLine":30,"endColumn":13},{"ruleId":"121","severity":1,"message":"155","line":13,"column":3,"nodeType":"123","messageId":"124","endLine":13,"endColumn":22},{"ruleId":"121","severity":1,"message":"156","line":4,"column":10,"nodeType":"123","messageId":"124","endLine":4,"endColumn":16},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Redirect' is defined but never used.","no-native-reassign",["157"],"no-negated-in-lhs",["158"],"'Component' is defined but never used.","'ReactDOM' is defined but never used.","'BrowserRouter' is defined but never used.","'useState' is defined but never used.","'web3' is assigned a value but never used.","'populate_data' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'accounts' is assigned a value but never used.","'SET_USER' is assigned a value but never used.","'history' is assigned a value but never used.","no-redeclare","'d' is already defined.","redeclared","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["159"],"'dummy_search' is assigned a value but never used.","'Pdf' is defined but never used.","'ref' is assigned a value but never used.","'hid' is assigned a value but never used.","'UncontrolledTooltip' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},"Update the dependencies array to be: [fetchData]",{"range":"162","text":"163"},[3990,3992],"[fetchData]"]